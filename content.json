[{"title":"SSM框架（后端）——（三）集成和配置swagger-bootstrap-ui(swagger2)","date":"2020-09-13T14:10:23.000Z","path":"2020/09/13/SSM框架（后端）——（三）集成和配置Mybatis-plus/","text":"注：本文直接参考官方文档 Maven中引入依赖Jar包pom.xml中添加依赖 123456&lt;!-- swagger2 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; 然后引入SwaggerBootstrapUi的jar包（具体版本号可用最新的${lastVersion}） 123456&lt;!-- SwaggerBootstrapUi --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt; &lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt; 这里需要注意，引入swagger2Api文档，需要项目支持web应用，因此需要导入spring-boot-starter-web依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 编写Swagger2Config配置文件添加SwaggerConfig类，配置如下： 12345678910111213141516171819202122@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() //扫描所有注解的API .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); &#125; private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title(\"SSM Demo Project APIs\") .description(\"swagger-bootstrap-ui\") .version(\"1.0\") .build(); &#125;&#125; WebMvcConfigurer中注册资源SpringBoot中访问doc.html报404的解决办法：实现SpringBoot的WebMvcConfigurer接口，添加相关的ResourceHandler 123456789101112131415@Configuration@Slf4jpublic class WebmvcConfig implements WebMvcConfigurer &#123; /** * 注册资源 * @param registry */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\"); registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\"); &#125;&#125; 界面展示进入本地端口号网址，http://localhost:8888/doc.html（端口号在`application.properties`文件中设置），此时因为是空项目，没有任何接口显示。 本章小结至此，项目通过Swagger2生成的API文档获得了，可以方便的查看接口和测试了。 上一篇：SSM框架（后端）——（二）配置MySQL数据库 下一篇：","tags":[{"name":"ssm","slug":"ssm","permalink":"https://myharu.github.io/tags/ssm/"},{"name":"swagger2","slug":"swagger2","permalink":"https://myharu.github.io/tags/swagger2/"},{"name":"swagger-bootstrap-ui","slug":"swagger-bootstrap-ui","permalink":"https://myharu.github.io/tags/swagger-bootstrap-ui/"}]},{"title":"SSM框架（后端）——（二）配置MySQL数据库","date":"2020-09-13T01:49:58.000Z","path":"2020/09/13/SSM框架（后端）——（二）配置MySQL数据库/","text":"注：如果本地和IDEA的MySQL数据库连接已经配置好了，需要配置到SpringBoot项目中，请直接跳转至第四步。 MySQL数据库的安装下载MySQL Community版本MySQL Community 官方下载地址 下载对应操作系统的版本安装包。（笔者使用的Windows系统，下载了免安装的zip压缩包） 安装配置本地MySQL服务器官方安装教程文档 参考官方文档，根据具体的安装包和操作系统查看对应的安装教程。如果下载和笔者相同版本的免安装包，直接参考：Windows免安装zip IDEA连接MySQL数据库本地安装配置好MySQL服务以后，IDEA提供的非常简便的数据库连接和操作接口，不用再使用windows命令行或者其他第三方数据库管理软件来操作数据库了。 Database选项卡添加数据库打开IDEA和对应项目，在右侧边栏位置找到Database选项卡，点击添加按钮 选择MySQL数据库​ 端口号为默认，填入数据库的用户名和密码，选择需要的数据库test，完整的URL如下： 1jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%2B8&amp;allowMultiQueries=true ?后面为数据库配置信息，具体属性参考官方文档，使用中根据需求添加属性配置：MySQL连接配置属性参考文档 本项目中的数据库连接配置具体解释： useUnicode=true&amp;characterEncoding=UTF-8：因为MySQL原生不支持UTF-8字符集，因此需要特别注明； autoReconnect=true： If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. useSSL=false：不启用SSL，降低安全性，但是能提高查询效率； zeroDateTimeBehavior=convertToNull：在针对DATETIME值时，如果值为0000-00-00，转换为null；策略除了convertToNull，还有exception（默认）抛出异常和round替换为最近日期； serverTimezone=GMT%2B8：时区选择（其中+号在URL中被编码为%2B8）； allowMultiQueries=true：允许;间隔的查询语句，支持批量SQL语句（会影响到Mybatis的批量查询、更新等功能） 填写完成后可以点击Test Connection测试是否能连接上，测试完成后需要重新填写密码。这样就建立了IDEA和MySQL数据库的连接，可以在IDEA提供的数据库console中进行SQL操作，也可以很便捷地查看数据库结构。 创建demo数据库用户表作为demo案例，必然要通过整个框架进行数据操作，因此这里需要构建一个基本的数据库。为了方便起见，本文以简单的用户管理进行演示。具体用户表建立如下： 123456789101112131415161718DROP TABLE IF EXISTS user;create table user( name VARCHAR(32) null comment '用户名', id BIGINT auto_increment comment '用户唯一标识', account VARCHAR(32) not null comment '用户账号', password VARCHAR(32) not null comment '用户密码', created_at DATETIME null comment '创建时间', created_by BIGINT null comment '创建人id', updated_at DATETIME null comment '修改时间', updated_by BIGINT null comment '更新人id', deleted TINYINT default 0 null comment '逻辑删除 删除标志 0未删除 1已删除', status TINYINT default 1 null comment '账号状态 0禁用 1启用', tel VARCHAR(11) not null comment '手机号', remark VARCHAR(512) null comment '备注', constraint User_pk primary key (id))ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic comment '用户表'; 其中具体字段在后面的文章中会用到，到时再进行具体描述。（也可以根据自己的喜好创建表和字段）创建表后的配置信息，可以参考：Create-table官方文档 ENGINE = InnoDB：引擎选择InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci：字符集为UTF-8与连接时配置保持一致； ROW_FORMAT = Dynamic ：InnoDB提供的动态行格式，对于VARCHARVARBINARY和BLOB和TEXT类型存储可变长的列值 项目MySQL数据库配置虽然前面在IDEA连接了数据库，但是在项目中并没有做MySQL数据库的相关配置。Spring官方非常贴心的给出了连接MySQL数据库的示例，可以直接参考官方示例：官方示例 pom.xml中添加MySQL`依赖包12345&lt;!-- mysql --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; src/main/resources/application.properties`中添加数据库连接配置在刷新Maven依赖包导入项目后，在application.properties文件中添加数据库连接配置： 12345678server.port=8888spring.application.name=ssmDemospring.mvc.throw-exception-if-no-handler-found=truespring.resources.add-mappings=falsespring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/ritai_mes_dev?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%2B8&amp;allowMultiQueries=truespring.datasource.username=rootspring.datasource.password=root 具体的属性配置请参考官方文档，这里不做详细介绍了。其中数据库连接URL中的配置，请参考数据库连接配置。 本章小结至此，项目和IDE都已经配置连接好了MySQL数据库。 上一篇：SSM框架（后端）——（一）初始化SpringBoot项目 下一篇：","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://myharu.github.io/tags/MySQL/"},{"name":"ssm","slug":"ssm","permalink":"https://myharu.github.io/tags/ssm/"}]},{"title":"SSM框架（后端）——（一）初始化SpringBoot项目","date":"2020-09-12T15:01:20.000Z","path":"2020/09/12/SSM框架（后端）——（一）初始化SpringBoot项目/","text":"Spring Initializer初始化项目Spring Initilalizer 是官方提供的初始化接口，可以直接通过网址进入：Spring Initializer 具体配置信息如图所示： 初始化SpringBoot项目，可以直接在上述网页中填写配置信息后，点击GENERATE按钮，会直接下载接口创建好的项目压缩包文件，下载到本地解压缩用IDEA打开项目即可。 其实IDEA直接提供了连接Spring Initilalizer生成初始化项目的接口，因此在IDEA中也能非常方便的构建项目。下面具体介绍一下IDEA中的构建操作。 新建Spring Initializer项目 填写项目基础配置信息Group、Artifact、Version、Description按照需要进行填写。 选择依赖包可按照需要选择需要的包（如果部分需求已经确定，比较方便），为了获取原始的初始化SpringBoot项目就暂不选择。 填写项目名称可根据需要修改项目名称。 生成初始化SpringBoot项目至此，一个空SpringBoot项目就生成了。 项目配置文档pom.xml自动生成的Maven配置文档pom.xml，具体Maven配置请参照官方文档（有时间学习完了写一篇） 这个文档主要用于项目开启后添加依赖包时进行配置。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.3.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.ssm&lt;/groupId&gt; &lt;artifactId&gt;ssm-project&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;name&gt;ssm-project&lt;/name&gt; &lt;description&gt;SSM Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; src/main/resources/application.properties项目配置文档，初始化时为空。项目中主要用于一些基础配置：端口号、数据库连接等，具体用法查阅参考文档。 本章小结至此，一个完整的SpringBoot空项目已经在IDEA中生成了。 上一篇： 下一篇：SSM框架（后端）——（二）配置MySQL数据库","tags":[{"name":"ssm","slug":"ssm","permalink":"https://myharu.github.io/tags/ssm/"},{"name":"Spring","slug":"Spring","permalink":"https://myharu.github.io/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://myharu.github.io/tags/SpringBoot/"}]}]