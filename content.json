[{"title":"SSM框架（后端）——（二）配置MySQL数据库","date":"2020-09-13T01:49:58.000Z","path":"2020/09/13/SSM框架（后端）——（二）配置MySQL数据库/","text":"注：如果本地和IDEA的MySQL数据库连接已经配置好了，需要配置到SpringBoot项目中，请直接跳转至第四步。 MySQL数据库的安装下载MySQL Community版本MySQL Community 官方下载地址 下载对应操作系统的版本安装包。（笔者使用的Windows系统，下载了免安装的zip压缩包） 安装配置本地MySQL服务器官方安装教程文档 参考官方文档，根据具体的安装包和操作系统查看对应的安装教程。如果下载和笔者相同版本的免安装包，直接参考：Windows免安装zip IDEA连接MySQL数据库本地安装配置好MySQL服务以后，IDEA提供的非常简便的数据库连接和操作接口，不用再使用windows命令行或者其他第三方数据库管理软件来操作数据库了。 Database选项卡添加数据库打开IDEA和对应项目，在右侧边栏位置找到Database选项卡，点击添加按钮 选择MySQL数据库​ 端口号为默认，填入数据库的用户名和密码，选择需要的数据库test，完整的URL如下： 1jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ritai_mes_dev?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;serverTimezone&#x3D;GMT%2B8&amp;allowMultiQueries&#x3D;true ?后面为数据库配置信息，具体属性参考官方文档，使用中根据需求添加属性配置：MySQL连接配置属性参考文档 本项目中的数据库连接配置具体解释： useUnicode=true&amp;characterEncoding=UTF-8：因为MySQL原生不支持UTF-8字符集，因此需要特别注明； autoReconnect=true： If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. useSSL=false：不启用SSL，降低安全性，但是能提高查询效率； zeroDateTimeBehavior=convertToNull：在针对DATETIME值时，如果值为0000-00-00，转换为null；策略除了convertToNull，还有exception（默认）抛出异常和round替换为最近日期； serverTimezone=GMT%2B8：时区选择（其中+号在URL中被编码为%2B8）； allowMultiQueries=true：允许;间隔的查询语句，支持批量SQL语句（会影响到Mybatis的批量查询、更新等功能） 填写完成后可以点击Test Connection测试是否能连接上，测试完成后需要重新填写密码。这样就建立了IDEA和MySQL数据库的连接，可以在IDEA提供的数据库console中进行SQL操作，也可以很便捷地查看数据库结构。 创建demo数据库用户表作为demo案例，必然要通过整个框架进行数据操作，因此这里需要构建一个基本的数据库。为了方便起见，本文以简单的用户管理进行演示。具体用户表建立如下： 123456789101112131415161718DROP TABLE IF EXISTS user;create table user( name VARCHAR(32) null comment &#39;用户名&#39;, id BIGINT auto_increment comment &#39;用户唯一标识&#39;, account VARCHAR(32) not null comment &#39;用户账号&#39;, password VARCHAR(32) not null comment &#39;用户密码&#39;, created_at DATETIME null comment &#39;创建时间&#39;, created_by BIGINT null comment &#39;创建人id&#39;, updated_at DATETIME null comment &#39;修改时间&#39;, updated_by BIGINT null comment &#39;更新人id&#39;, deleted TINYINT default 0 null comment &#39;逻辑删除 删除标志 0未删除 1已删除&#39;, status TINYINT default 1 null comment &#39;账号状态 0禁用 1启用&#39;, tel VARCHAR(11) not null comment &#39;手机号&#39;, remark VARCHAR(512) null comment &#39;备注&#39;, constraint User_pk primary key (id))ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic comment &#39;用户表&#39;; 其中具体字段在后面的文章中会用到，到时再进行具体描述。（也可以根据自己的喜好创建表和字段）创建表后的配置信息，可以参考官方文档：Create-table官方文档 ENGINE = InnoDB：引擎选择InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci：字符集为UTF-8与连接时配置保持一致； ROW_FORMAT = Dynamic ：InnoDB提供的动态行格式，对于VARCHARVARBINARY和BLOB和TEXT类型存储可变长的列值 项目MySQL数据库配置虽然前面在IDEA连接了数据库，但是在项目中并没有做MySQL数据库的相关配置。Spring官方非常贴心的给出了连接MySQL数据库的示例，可以直接参考官方示例：官方示例 pom.xml中添加MySQL`依赖包12345&lt;!-- mysql --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt; src/main/resources/application.properties`中添加数据库连接配置在刷新Maven依赖包导入项目后，在application.properties文件中添加数据库连接配置： 12345678server.port&#x3D;8888spring.application.name&#x3D;ssmDemospring.mvc.throw-exception-if-no-handler-found&#x3D;truespring.resources.add-mappings&#x3D;falsespring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driverspring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ritai_mes_dev?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;serverTimezone&#x3D;GMT%2B8&amp;allowMultiQueries&#x3D;truespring.datasource.username&#x3D;rootspring.datasource.password&#x3D;root 具体的属性配置请参考官方文档，这里不做详细介绍了。其中数据库连接URL中的配置，请参考[数据库连接配置](# 2.2 选择MySQL数据库)。 本章小结至此，项目和IDE都已经配置连接好了MySQL数据库。 上一篇：SSM框架（后端）——（一）初始化SpringBoot项目 下一篇：","tags":[{"name":"ssm","slug":"ssm","permalink":"https://myharu.github.io/tags/ssm/"},{"name":"MySQL","slug":"MySQL","permalink":"https://myharu.github.io/tags/MySQL/"}]},{"title":"SSM框架（后端）——（一）初始化SpringBoot项目","date":"2020-09-12T15:01:20.000Z","path":"2020/09/12/SSM框架（后端）——（一）初始化SpringBoot项目/","text":"Spring Initializer初始化项目Spring Initilalizer 是官方提供的初始化接口，可以直接通过网址进入：Spring Initializer 具体配置信息如图所示： 初始化SpringBoot项目，可以直接在上述网页中填写配置信息后，点击GENERATE按钮，会直接下载接口创建好的项目压缩包文件，下载到本地解压缩用IDEA打开项目即可。 其实IDEA直接提供了连接Spring Initilalizer生成初始化项目的接口，因此在IDEA中也能非常方便的构建项目。下面具体介绍一下IDEA中的构建操作。 新建Spring Initializer项目 填写项目基础配置信息Group、Artifact、Version、Description按照需要进行填写。 选择依赖包这里可按照需要选择需要的包（如果部分需求已经确定，比较方便），为了获取原始的初始化SpringBoot项目就暂不选择。 填写项目名称可根据需要修改项目名称。 生成初始化SpringBoot项目至此，一个空SpringBoot项目就生成了。 关键项目配置文档pom.xml自动生成的Maven配置文档pom.xml，具体Maven配置请参照官方文档（有时间学习完了写一篇） 这个文档主要用于项目开启后添加依赖包时进行配置。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt; &lt;version&gt;2.3.3.RELEASE&lt;&#x2F;version&gt; &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt; &lt;&#x2F;parent&gt; &lt;groupId&gt;com.ssm&lt;&#x2F;groupId&gt; &lt;artifactId&gt;ssm-project&lt;&#x2F;artifactId&gt; &lt;version&gt;1.0.0&lt;&#x2F;version&gt; &lt;name&gt;ssm-project&lt;&#x2F;name&gt; &lt;description&gt;SSM Demo project for Spring Boot&lt;&#x2F;description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt; &lt;&#x2F;properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt; &lt;scope&gt;test&lt;&#x2F;scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt; &lt;&#x2F;exclusion&gt; &lt;&#x2F;exclusions&gt; &lt;&#x2F;dependency&gt; &lt;&#x2F;dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt; &lt;&#x2F;plugin&gt; &lt;&#x2F;plugins&gt; &lt;&#x2F;build&gt;&lt;&#x2F;project&gt; src/main/resources/application.properties项目配置文档，初始化时为空。项目中主要用于一些基础配置：端口号、数据库连接等，具体用法查阅参考文档。 本章小结至此，一个完整的SpringBoot空项目已经在IDEA中生成了。 上一篇： 下一篇：","tags":[{"name":"Spring","slug":"Spring","permalink":"https://myharu.github.io/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://myharu.github.io/tags/SpringBoot/"},{"name":"ssm","slug":"ssm","permalink":"https://myharu.github.io/tags/ssm/"}]}]